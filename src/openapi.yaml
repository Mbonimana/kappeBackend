openapi: 3.0.0
info:
  title: KappeBackend API
  version: 1.0.0
  description: Full API documentation for KappeBackend project
servers:
  - url: http://localhost:5000/api
paths:
  /user/userRegistration:
    post:
      summary: Register a new user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullnames:
                  type: string
                email:
                  type: string
                password:
                  type: string
                userRole:
                  type: string
                phone:
                  type: string
              required: [fullnames, email, password, userRole, phone]
      responses:
        '201':
          description: User created successfully
        '400':
          description: Error in user signin
  /user/userLogin:
    post:
      summary: User login
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
      responses:
        '200':
          description: Successfully logged in
        '400':
          description: Invalid credentials
  /user/getAllUsers:
    get:
      summary: Get all users
      tags: [User]
      responses:
        '200':
          description: Users listed successfully
  /user/send-otp:
    post:
      summary: Send OTP to user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required: [email]
      responses:
        '200':
          description: OTP sent successfully
        '404':
          description: User not found
  /user/reset-password:
    post:
      summary: Reset password with OTP
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                otp:
                  type: string
                newPassword:
                  type: string
                confirmPassword:
                  type: string
              required: [email, otp, newPassword, confirmPassword]
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: All fields are required or OTP invalid
  /user/me:
    get:
      summary: Get current user profile
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
        '401':
          description: Unauthorized
  /product/create-product:
    post:
      summary: Create a new product
      tags: [Product]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prodName:
                  type: string
                prodDesc:
                  type: string
                prodPrice:
                  type: number
                ProdCat:
                  type: string
                image:
                  type: string
                  format: binary
              required: [prodName, prodDesc, prodPrice, ProdCat, image]
      responses:
        '201':
          description: Product created successfully
        '400':
          description: No image uploaded
  /products/get-products:
    get:
      summary: Get all products
      tags: [Product]
      responses:
        '200':
          description: Products fetched successfully
  /product/delete-product/{id}:
    delete:
      summary: Delete a product
      tags: [Product]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
  /cart/addtoCart:
    post:
      summary: Add product to cart
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
              required: [productId]
      responses:
        '200':
          description: Item added to cart
        '400':
          description: Product ID is required
        '401':
          description: Login required
  /cart/getCartByUser/{userId}:
    get:
      summary: Get cart by user
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID
      responses:
        '200':
          description: Cart listed successfully
        '401':
          description: Login required
        '404':
          description: Empty cart
  /cart/updatecartquantity/{id}:
    put:
      summary: Update cart item quantity
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Cart item ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
              required: [quantity]
      responses:
        '200':
          description: Cart item updated
        '400':
          description: Quantity must be greater than 0
        '404':
          description: Cart item not found
  /cart/deleteProduct/{id}:
    delete:
      summary: Remove product from cart
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Cart item ID
      responses:
        '200':
          description: Cart product removed
        '404':
          description: Cart item not found
  /cart/clear:
    delete:
      summary: Clear all items in cart
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart cleared successfully
        '401':
          description: Login required
  /order/checkout:
    post:
      summary: Checkout and create order
      tags: [Order]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerName:
                  type: string
                email:
                  type: string
                address:
                  type: string
                phone:
                  type: string
                paymentMode:
                  type: string
              required: [customerName, email, address, phone, paymentMode]
      responses:
        '201':
          description: Order placed successfully
        '400':
          description: Missing checkout fields or cart is empty
        '401':
          description: Unauthorized
  /order/getAllOrders:
    get:
      summary: Get all orders
      tags: [Order]
      responses:
        '200':
          description: Orders fetched successfully
  /order/my-orders:
    get:
      summary: Get logged-in user's orders
      tags: [Order]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's orders fetched successfully
        '401':
          description: Unauthorized
  /contact/createContact:
    post:
      summary: Create a contact message
      tags: [Contact]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                message:
                  type: string
              required: [name, email, phone, message]
      responses:
        '201':
          description: Contact message received
        '400':
          description: All fields are required
  /otp/send-otp:
    post:
      summary: Send OTP (standalone)
      tags: [OTP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required: [email]
      responses:
        '200':
          description: OTP sent successfully
        '404':
          description: User not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
