openapi: 3.0.0
info:
  title: KappeBackend API
  version: 1.0.0
  description: Full API documentation for KappeBackend project
servers:
  - url: http://localhost:5000

paths:
  # ===== USER APIs (placeholder - add yours here later) =====
  # Example:
  # /user/register:
  #   post:
  #     summary: Register a new user
  #     tags: [User]
  #     responses:
  #       '201':
  #         description: User created successfully

  # ===== CONTACT APIs =====
  /contact/createContact:
    post:
      summary: Create a contact message
      tags: [Contact]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                message:
                  type: string
              required: [name, email, phone, message]
      responses:
        '201':
          description: Contact message received
        '400':
          description: All fields are required

  # ===== OTP APIs =====
  /otp/send-otp:
    post:
      summary: Send OTP (standalone)
      tags: [OTP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required: [email]
      responses:
        '200':
          description: OTP sent successfully
        '404':
          description: User not found

  # ===== PRODUCT APIs =====
  /product/create-product:
    post:
      summary: Create a new product
      tags: [Product]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prodName:
                  type: string
                prodDesc:
                  type: string
                prodPrice:
                  type: number
                ProdCat:
                  type: string
                image:
                  type: string
                  format: binary
              required: [prodName, prodDesc, prodPrice, ProdCat, image]
      responses:
        '201':
          description: Product created successfully
        '400':
          description: No image uploaded

  /product/get-products:
    get:
      summary: Get all products
      tags: [Product]
      responses:
        '200':
          description: Products fetched successfully

  /product/delete-product/{id}:
    delete:
      summary: Delete a product
      tags: [Product]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found

  # ===== CART APIs =====
  /cart/addtoCart:
    post:
      summary: Add product to cart
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
              required: [productId]
      responses:
        '200':
          description: Item added to cart
        '400':
          description: Product ID is required
        '401':
          description: Login required

  /cart/getCartByUser/{userId}:
    get:
      summary: Get cart by user
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID
      responses:
        '200':
          description: Cart listed successfully
        '401':
          description: Login required
        '404':
          description: Empty cart

  /cart/updatecartquantity/{id}:
    put:
      summary: Update cart item quantity
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
